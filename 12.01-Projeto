Fase 1
-----------------------------------------------------------------------
- Montador (Assembler)
- Máquina Virtual de teste

Fase 2 - Ideias
-----------------------------------------------------------------------

Montador (Perl) -> Java
+ 
Máquina Virtual em Java

Máquina virtual
-> Vetor de instruções (programa)
-> Pilha de dados
-> Vetor de memória

Instrução -> classe (código operando)
Dado      -> Empilhável

    .-------------------------------.                               
    |       *                &   0  |   0 - base
    |   *      *               &    |   & - robô
    |                        &   &  |   * - cristal
    |  *   .--.                .----|   
    |     /   |        *    * /     |   Controlado por I.A.
    |    /    |              /      |   |
    |   /     |    .----.   '--.    |   '--> Programa em alto nível
    |  '------'    '----'       \   |               |         |
    |           *                '--|               ^         ^
    | &   &                    *    |            .-----.   Máquina
    |   &                    *   *  |            |  *  | < Virtual
    | 0   &                         |            '-----'   Interna
    '-------------------------------'                               

Fase 2 - Implementação
-----------------------------------------------------------------------

Por enquanto, implementaremos a máquina virtual interna. Como não 
teremos ainda o compilador do programa em alto nível para a máquina
virtual interna. Usaremos, então, 

Cenário: hexagonal

^
|      / \ / \ / \ / \ / \ / \ / \       
| i+1 | 0 | 1 | 2 |   |   |   |   | (2)    
|      \ / \ / \ / \ / \ / \ / \ /       
|  i    | 0 | 1 | 2 |   |   |   |   (1)
|      / \ / \ / \ / \ / \ / \ / \       
| i-1 | 0 | 1 | 2 |   |   |   |   |      
|      \ / \ / \ / \ / \ / \ / \ /       
*--------------------------------------->          
                                              
(1)                          (2)           
←  (i,j    ) => (0 ,-1)      ←  (0 ,-1)  
↖  (i+1,j-1) => (1 ,-1) *    ↖  (1 ,-1) *
↗  (i+1,j  ) => (1 , 0) *    ↗  (1 , 1) *
→  (i,  j-1) => (0 , 1)      →  (0 , 1)  
↘  (i-1,j  ) => (-1, 0) *    ↘  (-1, 1) *
↙  (i+1,j-1) => (-1,-1) *    ↙  (-1, 0) *
